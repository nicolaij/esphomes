#esphome  Version: 2024.12.2
substitutions:
  name: maket
  board: nodemcu-32s

esphome:
  name: ${name}
#  platformio_options:
#    board_build.f_cpu: 80000000L
  on_boot:
    then:
      - light.turn_off:
          id: LED_strip
esp32:
  board: ${board}

# Enable logging
logger:

wifi:
  networks:
    - ssid: "Nadtocheeva 5"
      password: "123123123"
  reboot_timeout: 0s
  ap:
    ssid: ${name}
    password: "123123123"
    ap_timeout: 10s

web_server:
  port: 80
  ota: false
  version: 3
  local: true

#captive_portal:

api:
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: ""

status_led:
  pin: GPIO2

globals:
  - id: stage_data
    type: int
    restore_value: no
    initial_value: '0'

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s  

  - platform: uptime
    name: Uptime Sensor

  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 30s

light:
  - platform: esp32_rmt_led_strip
    id: LED_strip
    rgb_order: GRB
    chipset: WS2812
    pin: GPIO4
    num_leds: 60
    rmt_channel: 0
    name: "Strip Light"
    internal: true
  - platform: partition
    name: "Partition Light 1"
    id: section1_led
    segments:
      # Use first 10 LEDs from the light with ID light1
      - id: LED_strip
        from: 0
        to: 11
    effects:
      - addressable_lambda:
          name: "Red down"
          update_interval: 100ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();
            static uint16_t progress = 0;
            if (initial_run) {
              progress = 0;
              it.all() = Color::BLACK;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }
            if (progress == it.size())
              return;
            it[progress++] = Color(255,0,0); //RED


  - platform: partition
    name: "Partition Light 2"
    id: section2_led
    segments:
      # Use LEDs 11-20 from the light with ID light1
      - id: LED_strip
        from: 12
        to: 23
    effects:
      - addressable_lambda:
          name: "Red down"
          update_interval: 100ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();
            static uint16_t progress = 0;
            if (initial_run) {
              progress = 0;
              it.all() = Color::BLACK;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }
            if (progress == it.size())
              return;
            it[progress++] = Color(255,0,0); //RED        
  - platform: partition
    name: "Partition Light 3"
    id: section3_led
    segments:
      - id: LED_strip
        from: 24
        to: 59
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
          name: Scan Effect With Custom Values
          move_interval: 20ms
          scan_width: 10
      - addressable_lambda:
          name: "Red"
          update_interval: 100ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();
            static uint16_t progress = 0;
            if (initial_run) {
              progress = 0;
              it.all() = Color::BLACK;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }
            if (progress == it.size() / 2)
            {
              it.all() = Color(255,0,0); //RED
              return;
            }
            it[it.size() / 2 + progress++] = Color(255,0,0); //RED
            it[it.size() / 2 - progress] = Color(255,0,0); //RED

button:
  - platform: template
    name: test1
    id: my_button1
    on_press:
      - script.execute: color_reddish
      - delay: !lambda "return 500;"
      - script.execute: color_blueish       

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: true
    name: "Boot button"
    on_click:
      then:
        - if:
            condition:
              lambda: 'return id(stage_data) == 0;'
            then:
              - switch.turn_on: enter1
              - globals.set:
                  id: stage_data
                  value: '1'
            else:                  
              - if:
                  condition:
                    lambda: 'return id(stage_data) == 1;'
                  then:
                    - switch.turn_on: enter2
                    - globals.set:
                        id: stage_data
                        value: '2'
                  else:                  
                    - if:
                        condition:
                          lambda: 'return id(stage_data) == 2;'
                        then:
                          - switch.turn_on: enter3
                          - globals.set:
                              id: stage_data
                              value: '3'
                        else:
                          - switch.turn_off: enter1
                          - switch.turn_off: enter2
                          - switch.turn_off: enter3
                          - globals.set:
                              id: stage_data
                              value: '0'

switch:
  - platform: template
    name: "1"
    id: enter1
    optimistic: true
    on_turn_off:
      - light.turn_off:
          id: section1_led
    on_turn_on:
      - light.turn_on:
          id: section1_led
          effect: "Red down"          

  - platform: template
    name: "2"
    id: enter2
    optimistic: true
    on_turn_off:
      - light.turn_off:
          id: section2_led
    on_turn_on:
      - light.turn_on:
          id: section2_led
          effect: "Red down"          

  - platform: template
    name: "3"
    id: enter3
    optimistic: true
    on_turn_off:
      - light.turn_off:
          id: section3_led
    on_turn_on:
      - light.turn_on:
          id: section3_led
          effect: "Red"   
script:
  - id: color_reddish
    then:
    - light.turn_on:
        id: section1_led
        brightness: 30%
        red: 60%
        green: 10%
        blue: 10%

  - id: color_blueish
    then:
    - light.turn_on:
        id: section1_led
        brightness: 30%
        red: 10%
        green: 10%
        blue: 50%
