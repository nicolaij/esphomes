esphome:
  name: namotka
  platformio_options:
    board_build.f_cpu: 160000000L

esp32:
  board: esp32dev

wifi:
  #ssid: !secret wifi_ssid_home
  #password: !secret wifi_password_home
  reboot_timeout: 0s
  ap:
    ssid: "Namotka"
    password: !secret ap_password
    ap_timeout: 10s
#  power_save_mode: HIGH

#captive_portal:

# Enable logging
logger:
  #level: VERBOSE
  #level: VERY_VERBOSE
  #level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: ""

# Активация web сервера
web_server:
  port: 80
  local: true
  ota: false
  version: 3
  #js_include: "www_all_number.js"
  #js_url: ""

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true      
    filters:
      - delayed_on: 50ms
    name: "Boot button"
    on_press:
      then:
        - if:
            condition:
              - lambda: "return id(g_layer_mode) < 10;"
            then:
              - button.press: btn_layer_home

  - platform: gpio
    pin:
      inverted: true
      number: 17
      mode:
        input: true
        pullup: true
    name: "Layer home switch"
    id: id_home

  - platform: gpio
    id: id_turns
    pin:
      number: 16
      inverted: false
      mode:
        input: true
        pullup: false
    on_press:
      then:
        - lambda: |-
            if (id(fan_rotator).state) //если включен
            {
              if (id(fan_rotator).direction == FanDirection::FORWARD) {
                auto call = id(num_cur_turn).make_call();
                call.number_increment(true);
                call.perform();
              } else {
                auto call = id(num_cur_turn).make_call();
                call.number_decrement(true);
                call.perform();
              }

                auto call = id(num_step_cur_turn).make_call();
                call.number_decrement(true);
                call.perform();

              if (id(g_layer_mode) == 11) //мотаем влево
              {
                id(g_coil_counter)++;
                int pos = id(g_layer_position) - (id(g_coil_counter) * id(num_d).state) / id(num_layer_step_size).state;

                id(id_stepper_lay).set_target(pos);

                auto callp = id(id_layer_position).make_call();
                callp.set_value(id(id_stepper_lay).target_position);
                callp.perform();
              }
              if (id(g_layer_mode) == 12) //мотаем вправо
              {
                id(g_coil_counter)++;
                int pos = id(g_layer_position) + (id(g_coil_counter) * id(num_d).state) / id(num_layer_step_size).state;

                id(id_stepper_lay).set_target(pos);

                auto callp = id(id_layer_position).make_call();
                callp.set_value(id(id_stepper_lay).target_position);
                callp.perform();
              }

              if (id(g_rotator_turn_stop) == id(num_cur_turn).state)
              {
                // Turn the fan off
                id(g_layer_mode) = 10;
                auto call = id(fan_rotator).turn_off();
                call.perform();
              }
            }

status_led:
  pin:
    number: GPIO2
    inverted: false

globals:
  - id: g_layer_mode
    type: int
    restore_value: no
    initial_value: "0"
  - id: id_layer_timeout
    type: int
    restore_value: no
    initial_value: "3"
  - id: id_stepper_offset
    type: int
    restore_value: no
    initial_value: "0"
  - id: g_coil_counter
    type: int
    restore_value: no
    initial_value: "0"
  - id: id_direction
    type: int
    restore_value: no
    initial_value: "1"
  - id: g_rotator_turn_stop
    type: int
    restore_value: no
    initial_value: "0"
  - id: g_layer_direction
    type: int
    restore_value: no
    initial_value: "0"
  - id: g_layer_position
    type: int
    restore_value: no
    initial_value: "0"

number:
  - platform: template
    name: "V1 Катушка. Начало:"
    id: num_offset
    mode: box
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 100
    step: 0.01
    unit_of_measurement: "мм."
  - platform: template
    name: "V2 Катушка. D проволоки:"
    id: num_d
    mode: box
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 5
    step: 0.001
    unit_of_measurement: "мм."
  - platform: template
    name: "V3 Катушка. Ширина:"
    id: num_width
    mode: box
    optimistic: true
    restore_value: true
    min_value: 1
    max_value: 100
    step: 0.01
    unit_of_measurement: "мм."
  - platform: template
    name: "X2 Укладчик. Шаг:"
    id: num_layer_step_size
    mode: box
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 1
    initial_value: 0.0750
    step: 0.0001
    unit_of_measurement: "мм/шаг"
  - platform: template
    name: "X3 Укладчик. Смещение:"
    id: num_layer_position_offset
    mode: box
    optimistic: true
    restore_value: true
    min_value: -50
    max_value: 50
    initial_value: 0
    step: 0.01
    unit_of_measurement: "мм."
  - platform: template
    name: "X4 Укладчик. Текущая позиция: "
    id: id_layer_position
    mode: box
    optimistic: true
    restore_value: false
    min_value: -1000
    max_value: 1000
    initial_value: 0
    step: 1
    unit_of_measurement: "шаг."
  - platform: template
    name: "Y2 Намотчик. Витки всего:"
    id: num_cur_turn
    mode: box
    optimistic: true
    restore_value: false
    min_value: -100000
    max_value: 100000
    initial_value: 0
    step: 1
  - platform: template
    name: "Y3 Намотчик. Витки на слой:"
    id: num_step_cur_turn
    mode: box
    optimistic: true
    restore_value: false
    min_value: -100000
    max_value: 100000
    initial_value: 0
    step: 1
  - platform: template
    name: "Y1 Намотчик. Скорость:"
    id: n_layer_speed_turn
    mode: box
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 100
    initial_value: 90
    step: 1

select:
  - platform: template
    name: "V5 Катушка. Начало:"
    id: sl_begin
    optimistic: true
    options:
      - "Со стороны привода"
      - "Со свободной стороны"
    initial_option: "Со стороны привода"
    restore_value: true

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_id
    update_interval: 1min

#  - platform: esp32_hall
#    name: "ESP32 Hall Sensor"
#    id: hall_id
#    update_interval: 30s

stepper:
  - platform: uln2003
    id: id_stepper_lay
    pin_a: 14
    pin_b: 27
    pin_c: 13
    pin_d: 26
    max_speed: 200 steps/s
    sleep_when_done: true
    step_mode: HALF_STEP
    acceleration: inf
    deceleration: inf

output:
  - platform: ledc
    id: motor_forward_pin
    pin: 32
    frequency: 1000
  - platform: ledc
    id: motor_reverse_pin
    pin: 33
    frequency: 1000
  - platform: ledc
    id: motor_enable
    pin: 25
    frequency: 1000

fan:
  - platform: hbridge
    id: fan_rotator
    name: "Y0 Намотчик"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    enable_pin: motor_enable
    decay_mode: slow # slow decay mode (coasting) or fast decay (braking).
    speed_count: 100

button:
  - platform: template
    name: "X1 Укладчик. Инициализация"
    id: btn_layer_home
    on_press:
      - globals.set:
          id: id_layer_timeout
          value: "300"
      - globals.set:
          id: g_layer_mode
          value: "1"
      #режим 1 - движение в сторону 0
      - stepper.set_speed:
          id: id_stepper_lay
          speed: 200 steps/s
      - stepper.report_position:
          id: id_stepper_lay
          position: 0
      - stepper.set_target:
          id: id_stepper_lay
          target: -550
      - while:
          condition:
            and:
              - binary_sensor.is_off: id_home
              - lambda: "return id(id_layer_timeout)-- > 0;"
          then:
            - delay: 10ms
      - if:
          condition:
            lambda: "return id(id_layer_timeout) > 0;"
          then:
            - globals.set:
                id: id_layer_timeout
                value: "100"
            - globals.set:
                id: g_layer_mode
                value: "2"
            - stepper.set_speed:
                id: id_stepper_lay
                speed: 20 steps/s
            - stepper.report_position:
                id: id_stepper_lay
                position: 0
            - stepper.set_target:
                id: id_stepper_lay
                target: 10
            #режим 2 - съезд с концевика
            - while:
                condition:
                  and:
                    - binary_sensor.is_on: id_home
                    - lambda: "return id(id_layer_timeout)-- > 0;"
                then:
                  - delay: 10ms
            - if:
                condition:
                  lambda: "return id(id_layer_timeout) > 0;"
                then:
                  - globals.set:
                      id: g_layer_mode
                      value: "10"
                  # переезд на offset
                  - stepper.set_speed:
                      id: id_stepper_lay
                      speed: 200 steps/s
                  - stepper.report_position:
                      id: id_stepper_lay
                      position: 0
                  - number.set:
                      id: id_layer_position
                      value: !lambda if(id(sl_begin).active_index() == 0) { return int((id(num_offset).state - id(num_layer_position_offset).state)/id(num_layer_step_size).state);} else {return int((id(num_offset).state + id(num_width).state + id(num_layer_position_offset).state)/id(num_layer_step_size).state);};
                  - stepper.set_target:
                      id: id_stepper_lay
                      target: !lambda return id(id_layer_position).state;
                else:
                  - logger.log: "ERROR. Home switch error!"
          else:
            - logger.log: "ERROR. Home switch not found!"

  - platform: template
    name: "X5 Укладчик. На позицию!"
    id: id_layer_go
    on_press:
      - stepper.set_target:
          id: id_stepper_lay
          target: !lambda return id(id_layer_position).state;

  - platform: template
    name: "Y6 Намотчик. STOP"
    id: id_layer_stop
    on_press:
      - fan.turn_off: fan_rotator
      - globals.set:
          id: g_layer_mode
          value: "10"
      - globals.set:
          id: g_rotator_turn_stop
          value: !lambda return id(num_cur_turn).state;

switch:
  - platform: template
    name: "Y4 Намотчик. Слой Лево/Право"
    assumed_state: true
    optimistic: true
    restore_mode: DISABLED
    turn_off_action:
      - globals.set:
          id: g_layer_mode
          value: "11"
      - globals.set:
          id: g_coil_counter
          value: "0"
      - globals.set:
          id: g_layer_position
          value: !lambda return id(id_layer_position).state;
      - globals.set:
          id: g_rotator_turn_stop
          value: !lambda return id(num_cur_turn).state + id(num_step_cur_turn).state;
      - stepper.set_speed:
          id: id_stepper_lay
          speed: 200 steps/s
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3 * 2;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state;
    turn_on_action:
      - globals.set:
          id: g_layer_mode
          value: "12"
      - globals.set:
          id: g_coil_counter
          value: "0"
      - globals.set:
          id: g_layer_position
          value: !lambda return id(id_layer_position).state;
      - globals.set:
          id: g_rotator_turn_stop
          value: !lambda return id(num_cur_turn).state + id(num_step_cur_turn).state;
      - stepper.set_speed:
          id: id_stepper_lay
          speed: 200 steps/s
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3 * 2;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state;

  - platform: template
    name: "Y5 Намотчик. Виток -1/+1"
    assumed_state: true
    optimistic: true
    restore_mode: DISABLED
    turn_on_action:
      - lambda: id(g_rotator_turn_stop) = int(id(num_cur_turn).state) + 1;
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state / 3 * 2;
      - delay: 100ms
      - fan.turn_on:
          id: fan_rotator
          direction: forward
          speed: !lambda return id(n_layer_speed_turn).state;
    turn_off_action:
      - lambda: id(g_rotator_turn_stop) = int(id(num_cur_turn).state) - 1;
      - fan.turn_on:
          id: fan_rotator
          direction: reverse
          speed: !lambda return id(n_layer_speed_turn).state;
